{"host":"petstore.swagger.io","protocol":"http","basePath":"/v2","rules":[{"path":"/user","method":"post","produces":["application/xml","application/json"],"frontendPath":"/user","requestRules":[],"responseRules":[],"operationId":"createUser","consumes":[]},{"path":"/pet","method":"post","produces":["application/xml","application/json"],"frontendPath":"/pet11","requestRules":[{"policyName":"mg-req-transformation","parameters":[{"name":"name","value":"Healthy check before send request","type":"String"},{"name":"description","value":"While creating a pet, maybe User input the incorrect parameter for the payload, as we know we type the \"catalog\" to \"Catalog\" uppercase the first letter  or there is a space in the parameter like \" catalog\". Even if some evil developer use inject a script in the parameter value like \"name = '<script src=\"http://evilwebsite.inject.js\">'\" to attack the web via the XXS.\nIn the piece of code, we add a validation and apply a fix to the wrong parameter name like transform the \" Catalog\" to \"catalog\" and \"name = '<script src=\"http://evilwebsite.inject.js\">\" to 'name = &lt script src=http://evilwebsite.inject.js&rt'.","type":"String"},{"name":"formatRequestFunc","value":"  function transformPayload(payload) {\n    var _ = require(\"lodash\");\n    for (var prop in payload) {\n      var temp = payload[prop];\n      var tempProp = prop;\n      // Remove the space in the property.\n      prop = _.trim(prop);\n      // LowerCase the first letter for the property.\n      prop = prop.charAt(0).toLowerCase() + prop.slice(1);\n      if(prop !== tempProp) {\n        payload[prop] = temp;\n        delete payload[tempProp];\n      }\n      if(!_.isEmpty(temp) && _.isPlainObject(temp)){\n        transformPayload(temp);\n      }else if(_.isArray(temp) && temp.length) {\n        for (var i = 0, len = temp.length, item; i < len; i++) {\n          item = temp[i];\n          transformPayload(item);\n        }\n      }else if(!_.isEmpty(temp)){\n        payload[prop] = temp.replace(/\\</g, \"&lt\").replace(/\\>/g, \"&gt\");\n      }\n    }\n    return payload;\n  }\n  payload = transformPayload(payload);\n\n  done(payload);\n","type":"String"}]}],"responseRules":[{"policyName":"mg-res-custom-js","parameters":[{"name":"name","value":"cus","type":"String"},{"name":"description","type":"String"},{"name":"formatResponseFunc","value":"  done(res);","type":"String"}]}],"operationId":"addPet","consumes":["application/json","application/xml"]},{"path":"/pet","method":"put","produces":["application/xml","application/json"],"frontendPath":"/pet11","requestRules":[],"responseRules":[],"operationId":"updatePet","consumes":["application/json","application/xml"]},{"path":"/user/login","method":"get","produces":["application/xml","application/json"],"frontendPath":"/user/login","requestRules":[],"responseRules":[],"operationId":"loginUser"},{"path":"/pet/{petId}","method":"get","produces":["application/xml","application/json"],"frontendPath":"/pet/{petId}","requestRules":[],"responseRules":[],"operationId":"getPetById"},{"path":"/pet/{petId}","method":"post","produces":["application/xml","application/json"],"frontendPath":"/pet/{petId}","requestRules":[],"responseRules":[],"operationId":"updatePetWithForm","consumes":["application/x-www-form-urlencoded"]},{"path":"/pet/{petId}","method":"delete","produces":["application/xml","application/json"],"frontendPath":"/pet/{petId}","requestRules":[],"responseRules":[],"operationId":"deletePet"},{"path":"/store/order","method":"post","produces":["application/xml","application/json"],"frontendPath":"/store/order","requestRules":[],"responseRules":[],"operationId":"placeOrder","consumes":[]},{"path":"/user/logout","method":"get","produces":["application/xml","application/json"],"frontendPath":"/user/logout","requestRules":[],"responseRules":[],"operationId":"logoutUser"},{"path":"/pet/findByTags","method":"get","produces":["application/xml","application/json"],"frontendPath":"/pet/findByTags","requestRules":[],"responseRules":[],"operationId":"findPetsByTags"},{"path":"/store/inventory","method":"get","produces":["application/json"],"frontendPath":"/store/inventory","requestRules":[],"responseRules":[],"operationId":"getInventory"},{"path":"/user/{username}","method":"get","produces":["application/xml","application/json"],"frontendPath":"/user/{username}","requestRules":[],"responseRules":[],"operationId":"getUserByName"},{"path":"/user/{username}","method":"put","produces":["application/xml","application/json"],"frontendPath":"/user/{username}","requestRules":[],"responseRules":[],"operationId":"updateUser","consumes":[]},{"path":"/user/{username}","method":"delete","produces":["application/xml","application/json"],"frontendPath":"/user/{username}","requestRules":[],"responseRules":[],"operationId":"deleteUser"},{"path":"/pet/findByStatus","method":"get","produces":["application/xml","application/json"],"frontendPath":"/pet/findByStatus11","requestRules":[{"policyName":"mg-req-throttle","parameters":[{"name":"numberOfTransactionsPerSecond","value":1,"type":"Number","description":"Number of transactions allowed in rolling window"}]},{"policyName":"mg-req-caching","parameters":[{"name":"timeUnit","value":"seconds","type":"String"},{"name":"time","value":10,"type":"Number"}]},{"policyName":"mg-req-custom-js","parameters":[{"name":"name","value":"Set default status","type":"String"},{"name":"description","value":"Add \"all\" to \"status\" in query if it's empty","type":"String"},{"name":"formatRequestFunc","value":"  var _ = require('lodash');\n  if ( _.isEmpty(_.trim(req.query.status))) {\n    req.query.status = 'all';\n  } \n\n  done(req);\n ","type":"String"}]},{"policyName":"mg-req-routing","parameters":[{"name":"routes","items":[{"parameters":[{"name":"condition","type":"String","description":"The condition of a route","value":"req.query.status && /all/.test(req.query.status)"},{"name":"preDestTransformFunction","type":"String","description":"The transformation function before destination.","value":"  done(payload);"},{"name":"destination","type":"String","description":"The destination of this route.","value":"/v2/pet/findByStatus?status=available,pending,sold"},{"name":"postDestTransformFunction","type":"String","description":"The transformation function after destination.","value":" var _ = require('lodash');\n if ( _.isArray(body) ) {\n   body = {\n     response: body,\n     isRouted: true\n   };\n } \n\n done(body);\n "}]}],"type":"Array","description":"An array of routes."}]}],"responseRules":[{"policyName":"mg-res-transformation","parameters":[{"name":"name","value":"Add vendor field","type":"String"},{"name":"description","value":"Add an vendor field into the response","type":"String"},{"name":"formatResponseFunc","value":"  var _ = require('lodash');\n \n  // ensure the response is an object\n  if (_.isArray(body)) {\n    body = {\n      response: body\n    };\n  }\n  body.vendor = 'TIBCO Cloud';\n\n  done(body);\n","type":"String"}]},{"policyName":"mg-res-custom-js","parameters":[{"name":"name","value":"Add total number","type":"String"},{"name":"description","value":"Add total number of the items to the response","type":"String"},{"name":"formatResponseFunc","value":"  var _ = require('lodash');\n   \n  if (_.isArray(res)) {\n    res.push({\n      total: res.length\n    });\n  } else if (_.isObject(res) && _.isArray(res.response)) {\n    res.total = res.response.length;\n  }\n\n  done(res);\n","type":"String"}]}],"operationId":"findPetsByStatus"},{"path":"/user/createWithList","method":"post","produces":["application/xml","application/json"],"frontendPath":"/user/createWithList","requestRules":[],"responseRules":[],"operationId":"createUsersWithListInput","consumes":[]},{"path":"/user/createWithArray","method":"post","produces":["application/xml","application/json"],"frontendPath":"/user/createWithArray","requestRules":[{"policyName":"mg-req-throttle","parameters":[{"name":"numberOfTransactionsPerSecond","value":1,"type":"Number","description":"Number of transactions allowed in rolling window"}]},{"policyName":"mg-req-transformation","parameters":[{"name":"name","value":"Limit users number","type":"String"},{"name":"description","value":"Limit the users number can create one request, currently we limit to 3","type":"String"},{"name":"formatRequestFunc","value":"  // Limit the number of user can put on one time, for test purpose, limit to create 3 user at one time\n  var _ = require('lodash');\n  if(payload&&payload.length>=4){\n    var newPayload = _.slice(payload, 0, 3);\n    payload = newPayload;\n  } \n\n  done(payload);\n","type":"String"}]}],"responseRules":[{"policyName":"mg-res-transformation","parameters":[{"name":"name","value":"Add message","type":"String"},{"name":"description","value":"Add a message to response, let user know if pass more then 3 user, we will just save the first 3 users","type":"String"},{"name":"formatResponseFunc","value":"  var _ = require('lodash');\n  if(!res){\n    res = {\n      \"message\": \"If you pass more then 3 user, we just save the first 3 user, other user will be dropped\"\n    };\n  }else if(_.isObject(res)){\n    res.message = \"If you pass more then 3 user, we just save the first 3 user, other user will be dropped\";\n  } \n\n  done(res);\n","type":"String"}]}],"operationId":"createUsersWithArrayInput","consumes":[]},{"path":"/store/order/{orderId}","method":"get","produces":["application/xml","application/json"],"frontendPath":"/store/order/{orderId}","requestRules":[],"responseRules":[],"operationId":"getOrderById"},{"path":"/store/order/{orderId}","method":"delete","produces":["application/xml","application/json"],"frontendPath":"/store/order/{orderId}","requestRules":[],"responseRules":[],"operationId":"deleteOrder"},{"path":"/pet/{petId}/uploadImage","method":"post","produces":["application/json"],"frontendPath":"/pet/{petId}/uploadImage","requestRules":[],"responseRules":[],"operationId":"uploadFile","consumes":["multipart/form-data"]}]}